!/bin/python3

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None


def print_singly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)

# Complete the mergeLists function below.

#
# For your reference:
#
# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#(1) Create a new head pointer to an empty linked list.
#(2) Check the first value of both linked lists.
#(3) Whichever node from L1 or L2 is smaller, append it to the new list and move the pointer to the next node.
#(4) Continue this process until you reach the end of a linked list.

def mergeLists(head1,head2):
    if head1 is None:
        return head2
    if head2 is None:
        return head1
   
    combined=SinglyLinkedListNode(None)
    prev=combined
    while head1 is not None and head2 is not None:
        if head1.data<head2.data:
            prev.next=head1
            head1=head1.next
        else:
            prev.next=head2
            head2=head2.next
        prev=prev.next
   
    if head1 is None:
        prev.next=head2
    if head2 is None:
        prev.next=head1
    return combined.next
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    tests = int(input())

    for tests_itr in range(tests):
        llist1_count = int(input())

        llist1 = SinglyLinkedList()

        for _ in range(llist1_count):
            llist1_item = int(input())
            llist1.insert_node(llist1_item)
            
        llist2_count = int(input())

        llist2 = SinglyLinkedList()

        for _ in range(llist2_count):
            llist2_item = int(input())
            llist2.insert_node(llist2_item)

        result = compare_lists(llist1.head, llist2.head)

        fptr.write(str(int(result)) + '\n')

    fptr.close()
